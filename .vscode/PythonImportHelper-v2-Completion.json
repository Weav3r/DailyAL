[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "BeautifulSoup",
        "importPath": "bs4",
        "description": "bs4",
        "isExtraImport": true,
        "detail": "bs4",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "Translator",
        "importPath": "googletrans",
        "description": "googletrans",
        "isExtraImport": true,
        "detail": "googletrans",
        "documentation": {}
    },
    {
        "label": "overDirectory",
        "kind": 2,
        "importPath": "dal-api.dal_commons.init",
        "description": "dal-api.dal_commons.init",
        "peekOfCode": "def overDirectory(dir):\n    global content\n    for filename in os.listdir(dir):\n        f = os.path.join(dir, filename)\n        if os.path.isfile(f) and not f.__contains__('.g.'):\n            content += 'export \\'{}\\';\\n'.format(f.replace('/lib', ''))\n        elif os.path.isdir(f):\n            overDirectory(f)\n# recursively loop through all the directories and populates the content      \noverDirectory(scanDirectoy)",
        "detail": "dal-api.dal_commons.init",
        "documentation": {}
    },
    {
        "label": "scanDirectoy",
        "kind": 5,
        "importPath": "dal-api.dal_commons.init",
        "description": "dal-api.dal_commons.init",
        "peekOfCode": "scanDirectoy = './lib/src/'\nexportedFileName = './lib/commons.dart'\n# global variable to store the final data\ncontent = \"\"\"\n// AUTO-GENERATED CONTENT\nlibrary dal_commons;\n\"\"\"\ndef overDirectory(dir):\n    global content\n    for filename in os.listdir(dir):",
        "detail": "dal-api.dal_commons.init",
        "documentation": {}
    },
    {
        "label": "exportedFileName",
        "kind": 5,
        "importPath": "dal-api.dal_commons.init",
        "description": "dal-api.dal_commons.init",
        "peekOfCode": "exportedFileName = './lib/commons.dart'\n# global variable to store the final data\ncontent = \"\"\"\n// AUTO-GENERATED CONTENT\nlibrary dal_commons;\n\"\"\"\ndef overDirectory(dir):\n    global content\n    for filename in os.listdir(dir):\n        f = os.path.join(dir, filename)",
        "detail": "dal-api.dal_commons.init",
        "documentation": {}
    },
    {
        "label": "content",
        "kind": 5,
        "importPath": "dal-api.dal_commons.init",
        "description": "dal-api.dal_commons.init",
        "peekOfCode": "content = \"\"\"\n// AUTO-GENERATED CONTENT\nlibrary dal_commons;\n\"\"\"\ndef overDirectory(dir):\n    global content\n    for filename in os.listdir(dir):\n        f = os.path.join(dir, filename)\n        if os.path.isfile(f) and not f.__contains__('.g.'):\n            content += 'export \\'{}\\';\\n'.format(f.replace('/lib', ''))",
        "detail": "dal-api.dal_commons.init",
        "documentation": {}
    },
    {
        "label": "get_id",
        "kind": 2,
        "importPath": "python.web-utils.index",
        "description": "python.web-utils.index",
        "peekOfCode": "def get_id(link: str):\n    return link.split('/')[-2]\ndef checkIfImageExistsInDirectory(image_name: str):\n    import os.path\n    return os.path.isfile('./web_assets/' + image_name)\ndef save_image(image_url: str, image_name: str):\n    if checkIfImageExistsInDirectory(image_name):\n        print('image already exists for id: {}'.format(image_name))\n        return\n    with open('./web_assets/' + image_name, 'wb') as handle:",
        "detail": "python.web-utils.index",
        "documentation": {}
    },
    {
        "label": "checkIfImageExistsInDirectory",
        "kind": 2,
        "importPath": "python.web-utils.index",
        "description": "python.web-utils.index",
        "peekOfCode": "def checkIfImageExistsInDirectory(image_name: str):\n    import os.path\n    return os.path.isfile('./web_assets/' + image_name)\ndef save_image(image_url: str, image_name: str):\n    if checkIfImageExistsInDirectory(image_name):\n        print('image already exists for id: {}'.format(image_name))\n        return\n    with open('./web_assets/' + image_name, 'wb') as handle:\n        response = requests.get(image_url, stream=True)\n        if not response.ok:",
        "detail": "python.web-utils.index",
        "documentation": {}
    },
    {
        "label": "save_image",
        "kind": 2,
        "importPath": "python.web-utils.index",
        "description": "python.web-utils.index",
        "peekOfCode": "def save_image(image_url: str, image_name: str):\n    if checkIfImageExistsInDirectory(image_name):\n        print('image already exists for id: {}'.format(image_name))\n        return\n    with open('./web_assets/' + image_name, 'wb') as handle:\n        response = requests.get(image_url, stream=True)\n        if not response.ok:\n            print(response)\n        for block in response.iter_content(1024):\n            if not block:",
        "detail": "python.web-utils.index",
        "documentation": {}
    },
    {
        "label": "genre_page",
        "kind": 2,
        "importPath": "python.web-utils.index",
        "description": "python.web-utils.index",
        "peekOfCode": "def genre_page(category: str):\n    url = 'https://myanimelist.net/{}.php'.format(category)\n    soup = BeautifulSoup(requests.get(url).text, 'html.parser')\n    ele = soup.select('.genre-link')\n    genre_desc = {}\n    for i in range(min(4, len(ele))):\n        e = ele[i]\n        a_tags = e.select('a')\n        for a in a_tags:\n            link = a.attrs['href']",
        "detail": "python.web-utils.index",
        "documentation": {}
    },
    {
        "label": "translate",
        "kind": 2,
        "importPath": "python.init",
        "description": "python.init",
        "peekOfCode": "def translate(dest, text):\n    try:\n        return translator.translate(text, dest).text\n    except:\n        return text\nwith open(arb_loc.format(\"en\")) as engFile:\n    eng = json.load(engFile)\n    for i in range(len(langs)):\n        file = files[i]\n        dest = langs[i]",
        "detail": "python.init",
        "documentation": {}
    },
    {
        "label": "arb_loc",
        "kind": 5,
        "importPath": "python.init",
        "description": "python.init",
        "peekOfCode": "arb_loc = \"./lib/l10n/intl_{}.arb\"\ntranslator = Translator()\nlangs = [\"de\", \"es\", \"pt\", \"fr\", \"id\", \"ja\", \"ko\", \"ar\", \"ru\", \"tr\"]\nfiles = [\"de_DE\", \"es_ES\", \"pt_BR\", \"fr_FR\", \"id_ID\", \"ja\", \"ko_KR\", \"ar_EG\", \"ru_RU\", \"tr_TR\"];\ndef translate(dest, text):\n    try:\n        return translator.translate(text, dest).text\n    except:\n        return text\nwith open(arb_loc.format(\"en\")) as engFile:",
        "detail": "python.init",
        "documentation": {}
    },
    {
        "label": "translator",
        "kind": 5,
        "importPath": "python.init",
        "description": "python.init",
        "peekOfCode": "translator = Translator()\nlangs = [\"de\", \"es\", \"pt\", \"fr\", \"id\", \"ja\", \"ko\", \"ar\", \"ru\", \"tr\"]\nfiles = [\"de_DE\", \"es_ES\", \"pt_BR\", \"fr_FR\", \"id_ID\", \"ja\", \"ko_KR\", \"ar_EG\", \"ru_RU\", \"tr_TR\"];\ndef translate(dest, text):\n    try:\n        return translator.translate(text, dest).text\n    except:\n        return text\nwith open(arb_loc.format(\"en\")) as engFile:\n    eng = json.load(engFile)",
        "detail": "python.init",
        "documentation": {}
    },
    {
        "label": "langs",
        "kind": 5,
        "importPath": "python.init",
        "description": "python.init",
        "peekOfCode": "langs = [\"de\", \"es\", \"pt\", \"fr\", \"id\", \"ja\", \"ko\", \"ar\", \"ru\", \"tr\"]\nfiles = [\"de_DE\", \"es_ES\", \"pt_BR\", \"fr_FR\", \"id_ID\", \"ja\", \"ko_KR\", \"ar_EG\", \"ru_RU\", \"tr_TR\"];\ndef translate(dest, text):\n    try:\n        return translator.translate(text, dest).text\n    except:\n        return text\nwith open(arb_loc.format(\"en\")) as engFile:\n    eng = json.load(engFile)\n    for i in range(len(langs)):",
        "detail": "python.init",
        "documentation": {}
    },
    {
        "label": "files",
        "kind": 5,
        "importPath": "python.init",
        "description": "python.init",
        "peekOfCode": "files = [\"de_DE\", \"es_ES\", \"pt_BR\", \"fr_FR\", \"id_ID\", \"ja\", \"ko_KR\", \"ar_EG\", \"ru_RU\", \"tr_TR\"];\ndef translate(dest, text):\n    try:\n        return translator.translate(text, dest).text\n    except:\n        return text\nwith open(arb_loc.format(\"en\")) as engFile:\n    eng = json.load(engFile)\n    for i in range(len(langs)):\n        file = files[i]",
        "detail": "python.init",
        "documentation": {}
    }
]